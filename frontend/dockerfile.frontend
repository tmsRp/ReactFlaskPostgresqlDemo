# Use the official Node.js runtime as the base image
FROM node:18-alpine AS builder
# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package.json .
COPY package-lock.json .

# Install dependencies
RUN npm install

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#RUN npm i -g serve 

# Copy the entire application code to the container
COPY . .

# Build the React app for production
RUN npm run build

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#CMD [ "serve", "-s", "dist" ]


# Use Nginx as the production server
# FROM nginx:alpine   ---------> 192.168
FROM nginx:latest

COPY --from=builder /app/dist /usr/share/nginx/html

# RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["/usr/sbin/nginx", "-g", "daemon off;"]



# FROM node:18-alpine------------------------------------------------------------------------

# WORKDIR /app

# COPY package.json .

# RUN npm install

# RUN npm i -g serve

# COPY . .

# RUN npm run build

# EXPOSE 3000

# CMD [ "serve", "-s", "dist" ]





# https://levelup.gitconnected.com/packaging-front-end-react-applications-under-a-production-environment-with-vite-and-nginx-in-docker-7e2739bc0494
# # Step 1: Build the application
# FROM node:16 AS builder
# WORKDIR /app
# COPY package.json package-lock.json ./
# RUN npm ci

# RUN npm install dotenv --save

# COPY . .
# RUN npm run build

# # Step 2: Set up the production environment
# FROM nginx:stable-alpine
# COPY --from=builder /app/build /usr/share/nginx/html
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"]
#-----------------------------------------------------------------------------------------------------